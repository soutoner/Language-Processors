// PLC - Adrian Gonzalez Leiva
import java_cup.runtime.*;

// Code available in the grammar actions
action code {:
	Printer printer = new Printer();	        // Variable for printing
	SymbolTable symTable = new SymbolTable();   // Symbol table
	int actualScope = 0;                        // Aux variable for scope
:}

/* Terminals */
terminal            	MAS, MENOS, POR, DIV, MOD, UMINUS, INCR, DECR, PREINCR;
terminal            	AP, CP, ALL, CLL;
terminal            	ASIG, PYC, COMA;
terminal				EQ, NEQ, LOW, LOE, GRE, GOE;
terminal				NOT, AND, OR;
terminal				ELSE, PRINT;
terminal                INT;
terminal String			IF, WHILE, DO, FOR;
terminal Integer    	ENTERO;
terminal String     	IDENT;

/* Non terminals */
non terminal         	listaSent, listaDecl;
non terminal         	sent, decl;
non terminal			elsePart;
non terminal String     incrDecrOp;
non terminal Condition	cond;
non terminal Object 	exp, prePostIncrDecr;

/* Precedence */
precedence left         COMA;
precedence right        ASIG;
precedence left         OR;
precedence left         AND;
precedence left         EQ, NEQ;
precedence left         LOW, LOE, GRE, GOE;
precedence left         MAS, MENOS;
precedence left         POR, DIV, MOD;
precedence right        UMINUS, PREINCR;
precedence left         INCR, DECR;
precedence left         ELSE;

/* Grammar */
listaSent ::= sent      
            | listaSent sent 
            ;

sent ::= exp:e PYC
		// IF - ELSE (optional)
       | IF:endIf AP cond:c CP		{: printer.label(c.trueTag); :}
	 	 sent						{: printer.goTo(endIf);
					   				   printer.label(c.falseTag);
									:}
         elsePart                   {: printer.label(endIf); :}
	    // WHILE
       | WHILE:whileTag		       	{: printer.label(whileTag); :}
	     AP cond:c CP   			{: printer.label(c.falseTag); :}
	     sent				        {: printer.goTo(whileTag);
					                    printer.goTo(c.trueTag);
					                :}
       	// DO WHILE 
       | DO:doTag       			{: printer.label(doTag); :}
	     sent
	     WHILE AP cond:c CP PYC		{: printer.label(c.trueTag);
					                   printer.goTo(doTag);
					                   printer.label(c.falseTag);
					                :}
       	// FOR
       | FOR:forTag						
	     AP exp:e1			        {: printer.label(forTag); :}
	     PYC cond:c PYC			    {: RESULT = Yylex.newTag();
					                   printer.label(RESULT.toString());
                                    :}
	     exp:e2				        {: printer.goTo(forTag);
					                   printer.label(c.trueTag);
					                :}
	     CP sent			        {: printer.goTo(RESULT.toString());
					                   printer.label(c.falseTag);
					                :}
       	// PRINT
       | PRINT AP exp:e1 CP PYC		{: printer.print(e1); :}
       	// Anonymous block
       | ALL                        {: actualScope++; :}
         listaSent CLL		        {: symTable.purge(actualScope--); :}
        // Declarations
       | INT listaDecl PYC          {:  :}
       ;

elsePart ::= ELSE sent
	       |
	       ;

listaDecl ::= listaDecl COMA decl  {:  :}
            | decl                 {:  :}
            ;

decl ::= IDENT:i                    {: symTable.declare(i, actualScope); :}
       | IDENT:i ASIG exp:e         {: printer.assignment(i, e); symTable.declare(i, actualScope); :}
       ;

exp ::= exp:e1 MAS exp:e2		    {: RESULT = printer.tern(e1 + " + " + e2); :}
      | exp:e1 MENOS exp:e2   		{: RESULT = printer.tern(e1 + " - " + e2); :}
      | exp:e1 POR exp:e2     		{: RESULT = printer.tern(e1 + " * " + e2); :}
      | exp:e1 DIV exp:e2     		{: RESULT = printer.tern(e1 + " / " + e2); :}
      | MENOS exp:e1          		{: RESULT = printer.tern("0 - " + e1); :}  %prec UMINUS
      | AP exp:e1 CP          		{: RESULT = e1; :}
      | IDENT:i ASIG exp:e1 		{: RESULT = printer.assignment(symTable.lookUp(i), e1); :}
      | IDENT:i				        {: RESULT = symTable.lookUp(i); :}
      | ENTERO:n              		{: RESULT = n; :}
      | prePostIncrDecr:n           {: RESULT = n; :}
      ;

prePostIncrDecr ::= incrDecrOp:op IDENT:e       {: RESULT = printer.preIncrDecr(e, op); :} %prec PREINCR
                  | IDENT:e incrDecrOp:op       {: RESULT = printer.postIncrDecr(e, op); :}
                  | error                       {: printer.error("ilegal pre/post-increment/decrement"); :}
                  ;

incrDecrOp ::= INCR					{: RESULT = "++"; :}
		     | DECR					{: RESULT = "--"; :}
		     ;

cond ::= exp:e1 EQ exp:e2		    {: RESULT = printer.condition(e1, Condition.EQ, e2); :}
       | exp:e1 NEQ exp:e2		    {: RESULT = printer.condition(e1, Condition.NEQ, e2); :}
       | exp:e1 LOW exp:e2		    {: RESULT = printer.condition(e1, Condition.LOW, e2); :}
       | exp:e1 LOE exp:e2		    {: RESULT = printer.condition(e1, Condition.LOE, e2); :}
       | exp:e1 GRE exp:e2		    {: RESULT = printer.condition(e1, Condition.GRE, e2); :}
       | exp:e1 GOE exp:e2		    {: RESULT = printer.condition(e1, Condition.GOE, e2); :}
       | NOT cond:c1			    {: RESULT = new Condition();
					                   RESULT.trueTag = c1.falseTag;
					                   RESULT.falseTag = c1.trueTag;
					                :}
       | cond:c1 AND 			    {: printer.label(c1.trueTag); :}
	     cond:c2  			        {: printer.label(c1.falseTag);
					                   printer.goTo(c2.trueTag);
					                   RESULT = c2;
					                :}
       | cond:c1 OR			        {: printer.label(c1.falseTag); :}
 	     cond:c2  			        {: printer.label(c1.trueTag);
					                   printer.goTo(c2.falseTag);
					                   RESULT = c2;
					                :}
       | AP cond:c1 CP			    {: RESULT = c1; :}
       ;
