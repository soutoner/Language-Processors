// PLC - Adrian Gonzalez Leiva
import java_cup.runtime.*;
import java.io.PrintStream;
import absyntax.exp.*;
import absyntax.sent.*;

parser code {:
	public AST tree = new AST();			// Abstract Syntax Tree associated

	public AST getAST(){
		return tree;
	}
:}

/*Terminals */
terminal            	MAS, MENOS, POR, DIV, UMINUS;
terminal            	AP, CP, ALL, CLL;
terminal            	ASIG, PYC;
terminal				EQ, NEQ, LOW, LOE, GRE, GOE;
terminal				NOT, AND, OR;
terminal				ELSE, PRINT;
terminal String			IF, WHILE, DO, FOR;
terminal Integer    	ENTERO;
terminal String     	IDENT;

/* Non terminals */
non terminal         	listaSent;
non terminal Node		sent;
non terminal			elsePart;
non terminal Object		cond;
non terminal Exp		exp;

/* Precedence */
precedence left  		MAS, MENOS;
precedence left  		POR, DIV;
precedence left  		UMINUS;
precedence left  		AND, OR;
precedence left  		ELSE;
precedence right 		NOT;

/* Grammar */
listaSent ::= sent:s				{: parser.tree.setRoot(s); :}
			| listaSent sent
			;

sent  ::= exp:e PYC					{: RESULT = e; :}
		| IF AP cond CP sent
		| IF AP cond CP sent ELSE sent
		| WHILE AP cond CP sent
		| DO sent WHILE AP cond CP PYC
		| FOR AP exp PYC cond PYC exp CP sent
		| PRINT AP exp:e CP PYC		{: RESULT = new Print(e); :}
		| ALL listaSent CLL
		;

exp   ::= exp:e1 MAS exp:e2			{: RESULT = new BinaryOp('+', e1, e2); :}
		| exp:e1 MENOS exp:e2		{: RESULT = new BinaryOp('-', e1, e2); :}
		| exp:e1 POR exp:e2			{: RESULT = new BinaryOp('*', e1, e2); :}
		| exp:e1 DIV exp:e2			{: RESULT = new BinaryOp('/', e1, e2); :}
		| MENOS exp:e				{: RESULT = new BinaryOp('-', new Int(0), e); :}
		| AP exp:e CP				{: RESULT = e; :}
		| IDENT ASIG exp
		| IDENT
		| ENTERO:n					{: RESULT = new Int(n); :}
		;

cond  ::= exp EQ exp
		| exp NEQ exp
		| exp LOW exp
		| exp LOE exp
		| exp GRE exp
		| exp GOE exp
		| NOT cond
		| cond AND cond
		| cond OR cond
		| AP cond CP
		;
