// PLC - Adrian Gonzalez Leiva
import java_cup.runtime.*;

// Code available in the grammar actions
action code {:
	Printer printer = new Printer();

	public String newLabel(){ return Generator.getInstance().newLabel(); }
:}

/*Terminals */
terminal				MAS, MENOS, POR, DIV, UMINUS;
terminal				AP, CP, ALL, CLL;
terminal				ASIG, PYC;
terminal				EQ, NEQ, LOW, LOE, GRE, GOE;
terminal				NOT, AND, OR;
terminal				ELSE, PRINT;
terminal String			IF, WHILE, DO, FOR;
terminal Integer		ENTERO;
terminal String			IDENT;

/* Non terminals */
non terminal			listaSent;
non terminal			sent;
non terminal			elsePart;
non terminal Condition	cond;
non terminal Object		exp;

/* Precedence */
precedence left			MAS, MENOS;
precedence left			POR, DIV;
precedence left			UMINUS;
precedence left			AND, OR;
precedence left			ELSE;
precedence right		NOT;

/* Grammar */
listaSent ::= sent
			| listaSent sent
			;

sent  ::= exp PYC

		  // IF - ELSE (optional)
		| IF:endIf AP cond:c CP			{: printer.label(c.getTrueLabel()); :}
		  sent							{: printer.goTo(endIf); printer.label(c.getFalseLabel()); :}
		  elsePart						{: printer.label(endIf); :}

		  // WHILE
		| WHILE:whileLabel				{: printer.label(whileLabel); :}
		  AP cond:c CP					{: printer.label(c.getFalseLabel()); :}
		  sent							{: printer.goTo(whileLabel); printer.goTo(c.getTrueLabel()); :}

		  // DO WHILE
		| DO:doLabel					{: printer.label(doLabel); :}
		  sent WHILE AP cond:c CP PYC   {: printer.label(c.getTrueLabel()); printer.goTo(doLabel); printer.label(c.getFalseLabel()); :}

		  // FOR
		| FOR:forLabel AP exp PYC		{: printer.label(forLabel); :}
		  cond:c PYC					{: RESULT = newLabel(); printer.label(RESULT.toString()); :}
		  exp CP						{: printer.goTo(forLabel); printer.label(c.getTrueLabel()); :}
		  sent							{: printer.goTo(RESULT.toString()); printer.label(c.getFalseLabel()); :}

		  // PRINT
	 	| PRINT AP exp:e CP PYC			{: printer.print(e); :}

	 	  // Anonymous block
	 	| ALL listaSent CLL
	 	;

elsePart  ::= ELSE sent
			|
			;

exp   ::= exp:e1 MAS exp:e2				{: RESULT = printer.tern(e1 + " + " + e2); :}
		| exp:e1 MENOS exp:e2			{: RESULT = printer.tern(e1 + " - " + e2); :}
		| exp:e1 POR exp:e2				{: RESULT = printer.tern(e1 + " * " + e2); :}
		| exp:e1 DIV exp:e2				{: RESULT = printer.tern(e1 + " / " + e2); :}
		| MENOS exp:e					{: RESULT = printer.tern("0 - " + e); :}  %prec UMINUS
		| AP exp:e CP					{: RESULT = e; :}
		| IDENT:i ASIG exp:e			{: RESULT = printer.assignment(i, e); :}
		| IDENT:i						{: RESULT = i; :}
		| ENTERO:n						{: RESULT = n; :}
		;

cond  ::= exp:e1 EQ exp:e2				{: RESULT = printer.condition(e1, Condition.EQ, e2); :}
		| exp:e1 NEQ exp:e2				{: RESULT = printer.condition(e1, Condition.NEQ, e2); :}
		| exp:e1 LOW exp:e2				{: RESULT = printer.condition(e1, Condition.LOW, e2); :}
		| exp:e1 LOE exp:e2				{: RESULT = printer.condition(e1, Condition.LOE, e2); :}
		| exp:e1 GRE exp:e2				{: RESULT = printer.condition(e1, Condition.GRE, e2); :}
		| exp:e1 GOE exp:e2				{: RESULT = printer.condition(e1, Condition.GOE, e2); :}
		| NOT cond:c					{: RESULT = c.not(); :}
		| cond:c1 AND					{: printer.label(c1.getTrueLabel()); :}
		  cond:c2						{: RESULT = c2; printer.label(c1.getFalseLabel()); printer.goTo(c2.getTrueLabel()); :}
		| cond:c1 OR					{: printer.label(c1.getFalseLabel()); :}
		  cond:c2						{: RESULT = c2; printer.label(c1.getTrueLabel()); printer.goTo(c2.getFalseLabel()); :}
		| AP cond:c CP					{: RESULT = c; :}
		;





