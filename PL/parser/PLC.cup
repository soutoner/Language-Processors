// PLC - Adrian Gonzalez Leiva
import java_cup.runtime.*;
import absyntax.AbstractSyntaxTree;

parser code {:
	private AbstractSyntaxTree tree;

    public parser(Yylex s, AbstractSyntaxTree t){
    	this(s);
    	this.tree = t;
   	}
:}

/*Terminals */
terminal            	MAS, MENOS, POR, DIV, UMINUS;
terminal            	AP, CP, ALL, CLL;
terminal            	ASIG, PYC;
terminal				EQ, NEQ, LOW, LOE, GRE, GOE;
terminal				NOT, AND, OR;
terminal				ELSE, PRINT;
terminal String			IF, WHILE, DO, FOR;
terminal Integer    	ENTERO;
terminal String     	IDENT;

/* Non terminals */
non terminal         	listaSent;
non terminal         	sent;
non terminal			elsePart;
non terminal Object		cond;
non terminal Object 	exp;

/* Precedence */
precedence left  		MAS, MENOS;
precedence left  		POR, DIV;
precedence left  		UMINUS;
precedence left  		AND, OR;
precedence left  		ELSE;
precedence right 		NOT;

/* Grammar */
listaSent ::= sent
			| listaSent sent
			;

sent  ::= exp PYC
		| IF AP cond CP sent
		| IF AP cond CP sent ELSE sent
		| WHILE AP cond CP sent
		| DO sent WHILE AP cond CP PYC
		| FOR AP exp PYC cond PYC exp CP sent
		| PRINT AP exp CP PYC
		| ALL listaSent CLL
		;

exp   ::= exp MAS exp
		| exp MENOS exp
		| exp POR exp
		| exp DIV exp
		| MENOS exp
		| AP exp CP
		| IDENT ASIG exp
		| IDENT
		| ENTERO
		;

cond  ::= exp EQ exp
		| exp NEQ exp
		| exp LOW exp
		| exp LOE exp
		| exp GRE exp
		| exp GOE exp
		| NOT cond
		| cond AND cond
		| cond OR cond
		| AP cond CP
		;
