// PLC - Adrian Gonzalez Leiva
import java_cup.runtime.*;
import java.io.PrintStream;
import java.util.*;
import absyntax.exp.*;
import absyntax.sent.*;
import absyntax.cond.*;

parser code {:
	public AST tree = new AST();			// Abstract Syntax Tree associated

	public AST getAST(){
		return tree;
	}
:}

/*Terminals */
terminal            	MAS, MENOS, POR, DIV, UMINUS;
terminal            	AP, CP, ALL, CLL;
terminal            	ASIG, PYC;
terminal				EQ, NEQ, LOW, LOE, GRE, GOE;
terminal				NOT, AND, OR;
terminal				ELSE, PRINT;
terminal String			IF, WHILE, DO, FOR;
terminal Integer    	ENTERO;
terminal String     	IDENT;

/* Non terminals */
non terminal List<Sent> listaSent;
non terminal Sent		sent;
non terminal			elsePart;
non terminal Cond		cond;
non terminal Exp		exp;

/* Precedence */
precedence left  		MAS, MENOS;
precedence left  		POR, DIV;
precedence left  		UMINUS;
precedence left  		AND, OR;
precedence left  		ELSE;
precedence right 		NOT;

/* Grammar */
listaSent ::= sent:s				{: RESULT = new ArrayList<Sent>(); RESULT.add(s); parser.tree.setRoot(new ListaSent(RESULT)); :}
			| listaSent:l sent:s    {: RESULT = l; RESULT.add(s); parser.tree.setRoot(new ListaSent(RESULT)); :}
			;

sent  ::= exp:e PYC					{: RESULT = new ExpSent(e); :}
		| IF:ifTag AP cond:c CP sent:s	{: RESULT = new IfSent(ifTag, c, s); :}
		| IF AP cond CP sent ELSE sent
		| WHILE AP cond CP sent
		| DO sent WHILE AP cond CP PYC
		| FOR AP exp PYC cond PYC exp CP sent
		| PRINT AP exp:e CP PYC		{: RESULT = new Print(e); :}
		| ALL listaSent:l CLL		{: RESULT = new ListaSent(l); :}
		;

exp   ::= exp:e1 MAS exp:e2			{: RESULT = new BinaryOp('+', e1, e2); :}
		| exp:e1 MENOS exp:e2		{: RESULT = new BinaryOp('-', e1, e2); :}
		| exp:e1 POR exp:e2			{: RESULT = new BinaryOp('*', e1, e2); :}
		| exp:e1 DIV exp:e2			{: RESULT = new BinaryOp('/', e1, e2); :}
		| MENOS exp:e				{: RESULT = new BinaryOp('-', new Int(0), e); :} %prec UMINUS
		| AP exp:e CP				{: RESULT = e; :}
		| IDENT:i ASIG exp:e		{: RESULT = new AssignExp(new Ident(i), e); :}
		| IDENT:i					{: RESULT = new Ident(i); :}
		| ENTERO:n					{: RESULT = new Int(n); :}
		;

cond  ::= exp:e1 EQ exp:e2			{: RESULT = new BinaryCond(e1, BinaryCond.EQ , e2); :}
		| exp:e1 NEQ exp:e2			{: RESULT = new BinaryCond(e1, BinaryCond.NEQ , e2); :}
		| exp:e1 LOW exp:e2			{: RESULT = new BinaryCond(e1, BinaryCond.LOW , e2); :}
		| exp:e1 LOE exp:e2			{: RESULT = new BinaryCond(e1, BinaryCond.LOE , e2); :}
		| exp:e1 GRE exp:e2			{: RESULT = new BinaryCond(e1, BinaryCond.GRE , e2); :}
		| exp:e1 GOE exp:e2			{: RESULT = new BinaryCond(e1, BinaryCond.GOE , e2); :}
		| NOT cond:c				{: RESULT = new NotCond(c); :}
		| cond:c1 AND cond:c2		{: RESULT = new AndCond(c1, c2); :}
		| cond:c1 OR cond:c2		{: RESULT = new OrCond(c1, c2); :}
		| AP cond:c CP				{: RESULT = c; :}
		;
