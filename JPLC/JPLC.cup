// JPLC - Adrian Gonzalez Leiva
import java_cup.runtime.*;

// Code available in the grammar actions
action code {:
    SymbolTable stack = new SymbolTable();          // Stack
    Printer printer = new Printer(stack);           // Variable for printing
:}

/*Terminals */
terminal            MAS, MENOS, POR, DIV, UMINUS;
terminal            AP, CP, ALL, CLL;
terminal            ASIG, PYC, COMMA;
terminal			LOW, GRE;
terminal			ELSE, INT, RETURN;
terminal String		IF, WHILE;
terminal Integer    ENTERO;
terminal String     IDENT;

/* Non terminals */
non terminal         	listaFunc, listaSent;
non terminal         	function, sent;
non terminal		 	elsePart, listaIdent;
non terminal            assig;
non terminal Condition	cond;
non terminal Object 	exp;

/* Precedence */
precedence left  COMMA;
precedence right ASIG;
precedence left  LOW, GRE;
precedence left  MAS, MENOS;
precedence left  POR, DIV;
precedence right UMINUS;
precedence left  ELSE;

/* Grammar */
listaFunc ::= function
		  	| listaFunc function
		  	;

function ::= INT IDENT:f 						{: printer.method(f); :}
			 AP INT IDENT:p CP					{: stack.variable(p); :}
			 sent								{: printer.endMethod();
			  									   stack.purge();
			  									:}
		   ;

sent ::= exp:e PYC								{: printer.pop(); :}
		 // IF - ELSE (opt)
	   | IF:endIf AP cond:c CP 					{: printer.label(c.trueTag); :}
		 sent				 					{: printer.goTo(endIf);
												   printer.label(c.falseTag);
												:}
		 elsePart								{: printer.label(endIf); :}
		 // WHILE LOOP
	   | WHILE:whileTag					       	{: printer.label(whileTag); :}
		 AP cond:c CP							{: printer.label(c.trueTag); :}
		 sent									{: printer.goTo(whileTag);
												   printer.label(c.falseTag);
												:}
		 // Anonymous block
	   | ALL 									{:  :}
		 listaSent                              {:  :}
		 CLL								    {:  :}
	   | RETURN exp:e PYC  						{: printer.retorno(); :}
       | INT listaIdent PYC						{:  :}
	   ;

listaSent ::= sent
		 	| listaSent sent
		 	;

// ELSE optional part
elsePart ::= ELSE sent
		    |
		    ;

// Declarations and multiple declarations
listaIdent ::= listaIdent COMMA IDENT:i				{: printer.push(new Integer(0));
                                                       printer.store(stack.localStackPtr());
                                                       stack.variable(i);
                                                    :}
			 | listaIdent COMMA IDENT:i ASIG exp:e	{: printer.store(stack.localStackPtr());
                                                       stack.variable(i);
                                                    :}
			 | IDENT:i								{: printer.push(new Integer(0));
			                                           printer.store(stack.localStackPtr());
			                                           stack.variable(i);
			                                        :}
			 | IDENT:i ASIG exp:e					{: printer.store(stack.localStackPtr());
                                                       stack.variable(i);
                                                    :}
			 ;
			
// Expressions
exp		::= exp:e1 MAS exp:e2		{: printer.operation(Printer.ADD); :}
   	      | exp:e1 MENOS exp:e2   	{: printer.operation(Printer.SUB);  :}
          | exp:e1 POR exp:e2     	{: printer.operation(Printer.MUL);  :}
          | exp:e1 DIV exp:e2     	{: printer.operation(Printer.DIV);  :}
	      | MENOS exp:e1          	{: printer.operation(Printer.USUB); :}  %prec UMINUS
          | AP exp:e1 CP          	{: :}
		  | assig:a 				{: :}
		  | IDENT:i				  	{: printer.load(stack.lookUp(i)); :}
	      | ENTERO:n              	{: printer.push(n); :}
		  | IDENT:i AP exp:e CP     {: printer.callFunction(i); :}
		  ;

// Assignation (not declaration)
assig ::= IDENT:i ASIG exp:e 	    {: printer.assignment(i); :}
		;
		
		// Boolean conditions
cond	::= exp:e1 LOW exp:e2		{: RESULT = printer.condition(e1, Condition.LOW, e2); :}
		  | exp:e1 GRE exp:e2		{: RESULT = printer.condition(e1, Condition.GRE, e2); :}
		  | AP cond:c1 CP			{: RESULT = c1; :}
		  ;
