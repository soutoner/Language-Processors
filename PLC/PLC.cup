// PLC - Adrian Gonzalez Leiva
import java_cup.runtime.*;

/*Terminals */
terminal            MAS, MENOS, POR, DIV, UMINUS;
terminal            AP, CP, ALL, CLL;
terminal            ASIG, PYC;
terminal			EQ, NEQ, LOW, LOE, GRE, GOE;
terminal			NOT, AND, OR;
terminal			ELSE, PRINT;
terminal String		IF, WHILE, DO, FOR;
terminal Integer    ENTERO;
terminal String     IDENT;

/* Non terminals */
non terminal         	listaSent;
non terminal         	sent;
non terminal		 	elsePart;
non terminal Condition	cond;
non terminal String 	exp;

/* Precedence */
precedence left  MAS, MENOS;
precedence left  POR, DIV;
precedence left  UMINUS;
precedence left  AND, OR;
precedence left  ELSE;
precedence right NOT;

/* Grammar */
listaSent	::= sent      
              | listaSent sent 
              ;

sent	::= exp:e PYC
		  | IF:endIf AP cond:c CP 					{: Print.label(c.trueTag); :}
			sent				 					{: Print.goTo(endIf);
													   Print.label(c.falseTag);													
													:}
			elsePart								{: Print.label(endIf); :}
		  | WHILE:whileTag					       	{: Print.label(whileTag); :}
			AP cond:c CP							{: Print.label(c.falseTag); :}
			sent									{: Print.goTo(whileTag);
													   Print.goTo(c.trueTag);													
													:}
		  | DO:doTag 								{: Print.label(doTag); :}
			sent 
			WHILE AP cond:c CP PYC					{: Print.label(c.trueTag);
													   Print.goTo(doTag);
													   Print.label(c.falseTag);
													:}
		  | FOR:forTag								
			AP exp:e1								{: Print.label(forTag); :}
			PYC cond:c PYC							{: RESULT = Yylex.newTag();
													   Print.label(RESULT.toString());													
													:}
			exp:e2									{: Print.goTo(forTag);
													   Print.label(c.trueTag);
													:}
			CP sent									{: Print.goTo(RESULT.toString());
													   Print.label(c.falseTag);
													:} 
		  | PRINT AP exp:e1 CP PYC					{: Print.print(e1); :}
		  | ALL listaSent CLL						{:  :}           
          ;

elsePart ::= ELSE sent
		   |
		   ;

exp		::= exp:e1 MAS exp:e2		{: RESULT = Print.tern(e1 + " + " + e2); :}
   	      | exp:e1 MENOS exp:e2   	{: RESULT = Print.tern(e1 + " - " + e2); :}
          | exp:e1 POR exp:e2     	{: RESULT = Print.tern(e1 + " * " + e2); :}
          | exp:e1 DIV exp:e2     	{: RESULT = Print.tern(e1 + " / " + e2); :}
	      | MENOS exp:e1          	{: RESULT = Print.tern("0 - " + e1); :}  %prec UMINUS
          | AP exp:e1 CP          	{: RESULT = e1; :}
		  | IDENT:i ASIG exp:e1 	{: RESULT = Print.assignment(i, e1); :}
		  | IDENT:i				  	{: RESULT = i; :}
	      | ENTERO:n              	{: RESULT = n.toString(); :}
		  ;

cond	::= exp:e1 EQ exp:e2		{: RESULT = Condition.condition(e1, Condition.EQ, e2); :}
		  | exp:e1 NEQ exp:e2		{: RESULT = Condition.condition(e1, Condition.NEQ, e2); :}
		  | exp:e1 LOW exp:e2		{: RESULT = Condition.condition(e1, Condition.LOW, e2); :} 
		  | exp:e1 LOE exp:e2		{: RESULT = Condition.condition(e1, Condition.LOE, e2); :}
		  | exp:e1 GRE exp:e2		{: RESULT = Condition.condition(e1, Condition.GRE, e2); :}
		  | exp:e1 GOE exp:e2		{: RESULT = Condition.condition(e1, Condition.GOE, e2); :}
		  | NOT cond:c1				{: RESULT = new Condition();
									   RESULT.trueTag = c1.falseTag;
									   RESULT.falseTag = c1.trueTag;
									:}
		  | cond:c1 AND 			{: Print.label(c1.trueTag); :}
			cond:c2		  			{: Print.label(c1.falseTag);
									   Print.goTo(c2.trueTag);
									   RESULT = c2;									
									:}
		  | cond:c1 OR 				{: Print.label(c1.falseTag); :}
			cond:c2		  			{: Print.label(c1.trueTag);
									   Print.goTo(c2.falseTag);
									   RESULT = c2;									
									:}
		  | AP cond:c1 CP			{: RESULT = c1; :}
		  ;
