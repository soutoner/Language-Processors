// PLC - Adrian Gonzalez Leiva
import java_cup.runtime.*;

// Code available in the grammar actions
action code {:
	Printer printer = new Printer();	    // Variable for printing
:}

/*Terminals */
terminal            	MAS, MENOS, POR, DIV, UMINUS;
terminal            	AP, CP, ALL, CLL;
terminal            	ASIG, PYC;
terminal		EQ, NEQ, LOW, LOE, GRE, GOE;
terminal		NOT, AND, OR;
terminal		ELSE, PRINT;
terminal String		IF, WHILE, DO, FOR;
terminal Integer    	ENTERO;
terminal String     	IDENT;

/* Non terminals */
non terminal         	listaSent;
non terminal         	sent;
non terminal		elsePart;
non terminal Condition	cond;
non terminal Object 	exp;

/* Precedence */
precedence left  MAS, MENOS;
precedence left  POR, DIV;
precedence left  UMINUS;
precedence left  AND, OR;
precedence left  ELSE;
precedence right NOT;

/* Grammar */
listaSent ::= sent      
            | listaSent sent 
            ;

sent ::= exp:e PYC
	// IF - ELSE (optional)
       | IF:endIf AP cond:c CP		{: printer.label(c.trueTag); :}
	 sent				{: printer.goTo(endIf);
					   printer.label(c.falseTag);
					:}
	 elsePart			{: printer.label(endIf); :}
	 // WHILE 
       | WHILE:whileTag		       	{: printer.label(whileTag); :}
	 AP cond:c CP			{: printer.label(c.falseTag); :}
	 sent				{: printer.goTo(whileTag);
					   printer.goTo(c.trueTag);
					:}
       	// DO WHILE 
       | DO:doTag			{: printer.label(doTag); :}
	 sent 
	 WHILE AP cond:c CP PYC		{: printer.label(c.trueTag);
					   printer.goTo(doTag);
					   printer.label(c.falseTag);
					:}
       	// FOR
       | FOR:forTag						
	 AP exp:e1			{: printer.label(forTag); :}
	 PYC cond:c PYC			{: RESULT = Yylex.newTag();
					   printer.label(RESULT.toString());
					:}
	 exp:e2				{: printer.goTo(forTag);
					   printer.label(c.trueTag);
					:}
	 CP sent			{: printer.goTo(RESULT.toString());
					   printer.label(c.falseTag);
					:} 
       	// PRINT
       | PRINT AP exp:e1 CP PYC		{: printer.print(e1); :}
       	// Anonymous block
       | ALL listaSent CLL		{:  :}           
       ;

elsePart ::= ELSE sent
	   |
	   ;

exp ::= exp:e1 MAS exp:e2		{: RESULT = printer.tern(e1 + " + " + e2); :}
      | exp:e1 MENOS exp:e2   		{: RESULT = printer.tern(e1 + " - " + e2); :}
      | exp:e1 POR exp:e2     		{: RESULT = printer.tern(e1 + " * " + e2); :}
      | exp:e1 DIV exp:e2     		{: RESULT = printer.tern(e1 + " / " + e2); :}
      | MENOS exp:e1          		{: RESULT = printer.tern("0 - " + e1); :}  %prec UMINUS
      | AP exp:e1 CP          		{: RESULT = e1; :}
      | IDENT:i ASIG exp:e1 		{: RESULT = printer.assignment(i, e1); :}
      | IDENT:i				{: RESULT = i; :}
      | ENTERO:n              		{: RESULT = n; :}
      ;

cond ::= exp:e1 EQ exp:e2		{: RESULT = printer.condition(e1, Condition.EQ, e2); :}
       | exp:e1 NEQ exp:e2		{: RESULT = printer.condition(e1, Condition.NEQ, e2); :}
       | exp:e1 LOW exp:e2		{: RESULT = printer.condition(e1, Condition.LOW, e2); :}
       | exp:e1 LOE exp:e2		{: RESULT = printer.condition(e1, Condition.LOE, e2); :}
       | exp:e1 GRE exp:e2		{: RESULT = printer.condition(e1, Condition.GRE, e2); :}
       | exp:e1 GOE exp:e2		{: RESULT = printer.condition(e1, Condition.GOE, e2); :}
       | NOT cond:c1			{: RESULT = new Condition();
					   RESULT.trueTag = c1.falseTag;
					   RESULT.falseTag = c1.trueTag;
					:}
       | cond:c1 AND 			{: printer.label(c1.trueTag); :}
	 cond:c2  			{: printer.label(c1.falseTag);
					   printer.goTo(c2.trueTag);
					   RESULT = c2;									
					:}
       | cond:c1 OR			{: printer.label(c1.falseTag); :}
 	 cond:c2  			{: printer.label(c1.trueTag);
					   printer.goTo(c2.falseTag);
					   RESULT = c2;									
					:}
       | AP cond:c1 CP			{: RESULT = c1; :}
       ;
